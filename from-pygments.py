#!/usr/bin/env python3
"""Generates languages, styles, etc. from pygments for use with
source-highlight.
"""
import os

from pygments import lexers


BASE_DIR = "share/py-source-highlight"


def token_to_rulename(token):
    return str(token)[6:].lower().replace(".", '_')


def regex_to_rule(pyregex, rulename):
    rule = rulename
    regex = pyregex
    if pyregex.endswith("\\n"):
        rule += " start"
        regex = regex[:-2]
    rule += ' = "' + regex + '"'
    return rule


def genlang(lexer):
    name = lexer.name.lower()
    lines = ["# autogenerated from pygments for " + name]
    for pyregex, token in lexer.tokens['root']:
        rulename = token_to_rulename(token)
        lines.append(regex_to_rule(pyregex, rulename))
    lang = "\n".join(lines) + "\n"
    fname = os.path.join(BASE_DIR, lexer.name.lower() + ".lang")
    with open(fname, 'w') as f:
        f.write(lang)
    return fname


def add_to_lang_map(lexer, base, lang_map):
    lang_map[lexer.name] = base
    lang_map[lexer.name.lower()] = base
    for alias in lexer.aliases:
        lang_map[alias] = base
        lang_map[alias.lower()] = base
    for filename in lexer.filenames:
        _, _, name = filename.rpartition('.')
        lang_map[name] = base
        lang_map[name.lower()] = base
    for filename in lexer.alias_filenames:
        _, _, name = filename.rpartition('.')
        lang_map[name] = base
        lang_map[name.lower()] = base


def write_lang_map(lang_map):
    print("writing lang.map")
    lines = []
    for key, value in sorted(lang_map.items()):
        lines.append(key + " = " + value)
    s = "\n".join(lines) + "\n"
    fname = os.path.join(BASE_DIR, "lang.map")
    with open(fname, "w") as f:
        f.write(s)


def genlangs():
    lexer_names = ['diff']
    lang_map = {}
    for lexer_name in lexer_names:
        print("Generating lexer " + lexer_name)
        lexer = lexers.get_lexer_by_name(lexer_name)
        fname = genlang(lexer)
        base = os.path.basename(fname)
        add_to_lang_map(lexer, base, lang_map)
    write_lang_map(lang_map)


def main(args=None):
    genlangs()


if __name__ == "__main__":
    main()